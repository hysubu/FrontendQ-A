#Q1. Difference Between Map,Filter,Foreach ?

-> map()
	-> Map function is a higher order Function in javascript 
	-> Its return a new array based on existing array 
	-> how it work -> if we want one function applying a list of elements so that time we use map function. 
	->Examples :
		-> var arry = [10, 20 , 30 , 40]
		var newarr =  arry.map(item => item*10)
		console.log(newarr)
		// OutPut : - [ 100, 200, 300, 400 ] 

-> Filter()
	-> Filter is A higher order Function 
	-> Filter function return a new array when the condition will true 
	-> how it work  -> When we have multiple data in one array if we want to filter some data like greaterthan> any number(6)
	-> That time we use filter funcion in Javascript 
	-> Examples : 
		-> var arry = [10, 20 , 30 , 40]
		var newarry = arry.filter(item => item > 10)
		console.log(newarry)
		// Output [ 20, 30, 40 ] 

-> ForEach:
	-> Foreach Doesnot return a new array 
	-> Its itrate over a array 
	-> Its used to logging , updateing variable or modifying the data

	-> Examples : arry.forEach((ary)=> console.log(ary))
			// Output : 
			// 10
			// 20
			// 30
			// 40 




#Q2. Difference Between map() and ForEach() ?

 MAP()						FOREACH()

-> Its a array fucntion 			-> Its a Array Function 
-> Map function return a new array 		-> Its doesnot return a new array 

-> Example: 					-> Example
let array = [120,30, 40, 3]                   let array = [120,30, 40, 3]		
const ne = array.map((item)=>{			-> const newforeav= array.forEach((item)=>{		 
  return item + 2					return item + 3	
})						})
console.log(ne); // [ 122, 32, 42, 5 ]		console.log(newforeav)  // undefine 






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>..


#Q3. Difference Between null and undefine ? 

NULL 						UNDEFINED

-> null is a particular value 			-> undefined is a not initial any value 

-> null type is a Object			->  undefined  type is undefine  

-> console.log(typeof undefined)//		-> console.log(typeof null) // object

-> console.log(null == undefined)// true	-> console.log(null === undefined) // false
						
-> var a = null ;				-> var a ;
console.log(a) // null				-> console.log(a)  // undefined


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q4.What is Var let and Const ? 

-> VAR
..........
-> when it declare use var keyword 
-> var variables can be redeclared and reassigned.
-> when we declare a var variable inside curly bracket  it cann assign outside the scope 
-> we can update the var  variable 
-> Example: 
-> {
  var a = "subu"
   }
console.log(a)  // subu


-> LET :
..................
-> let variables can be reassigned, but not redeclared within the same block scope.

-> Examples: 
{
  let a = "subu"
}
console.log(a) // a is not defined

-> Exampels : 2

let a = 12
a = 122 
console.log(a) // 122 


CONST
..............

-> Variables declared with const also have block scope, just like let.

-> However, const variables are immutable, meaning they cannot be reassigned once they are assigned a value.

-> const a = 100
	a = 200
   console.log(a) // error

-> Examples : 2

{
  const a = 100
}
console.log(a); //a is not ddeclae 
 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


#Q5. Difference Between call apply and bind method 


-> Call()

	-> The call method invokes a function with a specified this value and individual
	 arguments passed as comma-separated values.
	
	-> Examples :-
 
	function greet(arg){
  		work ="testing "
  		console.log(`helli iam ${arg} and i am a ${this.work}`) // work is testing here  
		}
	const person = {
  	work :"developer",
  	name :"subrat mohanty"
	}
	greet(person.name) // here we using normal function  
	// if we want to change the this value ysing call() method 
	greet.call(person,person.name)
	// 1st argument is :  person object 
	// 2nd argument is : pass  greet () function arguments 
 

-> apply()
	
	-> The apply method is similar to call, but it accepts arguments
	   as an array or an array-like object
	
	-> It takes the function context as its first argument

	-> Examples : 
	
		->  function greet(arg){
  			work ="testing "
 			 console.log(`helli iam ${arg} and i am a ${this.work}`) // work is testing here  
		}
		const person = {
 		 work :"developer",
  		 name :"subrat mohanty"
		}
		// greet(person.name) // here we using normal function  
		// if we want to change the this value ysing apply() method 
		greet.apply(person,[person.name])
		// 1st argument is :  person object 
		// 2nd argument is : pass  greet () function arguments  as an array format

-> bind()

	-> The bind method creates a new function with a specified this value and pre-defined initial arguments.

	-> It does not immediately invoke the function but returns a new function that can be invoked later.

	-> The bind method is often used to create a function with a fixed context or to create a partially applied function.

	
	-> Examples :

	function greet(arg){
  		work ="testing "
  		console.log(`helli iam ${arg} and i am a ${this.work}`) // work is testing here  
	}
	const person = {
  		work :"developer",
  		name :"subrat mohanty"
	}
	// greet(person.name) // here we using normal function  
	// if we want to change the this value ysing apply() method 
	const newbindfun = greet.bind(person)
	// 1st argument is :  person object 
	// it cant take second arguments  
	// its create a new function 
	newbindfun(person.name)  
	// here we pass 2nd  argument  the new function 

			

	

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.


#Q6. Difference Between Find() and Filter() method  ? 

-> Find() 

	-> The "find" method is used to search for the first element in a collection that matches a specific condition.
	
	-> Once the first match is found, the search stops, and the method returns that element

	-> If no matching element is found, the method typically returns a "null" or "undefined" value

	-> Examples : 
	let arr = [2, 4, 3, 5, 67, 23, 11]
	let d = arr.find((num => num > 3))
	console.log(d)// 4


-> Filter()
	
	-> The filter method is used to create a new array with all elements that satisfy a given condition.
	
	-> const numbers = [1, 2, 3, 4, 5, 6];

	const evenNumbers = numbers.filter(number => number % 2 === 0);
	console.log(evenNumbers); // [2, 4, 6]

		







